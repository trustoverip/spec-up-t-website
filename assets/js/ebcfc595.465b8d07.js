"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[759],{28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>l});var r=s(96540);const i={},t=r.createContext(i);function c(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(t.Provider,{value:n},e.children)}},35686:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"developer-documentation/scripts/scripts-general/regex-info","title":"Regex Inventory","description":"This inventory was generated by Copilot\'s \u201cClaude Sonnet 4 (Preview)\u201d and has not yet been verified by a human.","source":"@site/docs/developer-documentation/scripts/scripts-general/regex-info.md","sourceDirName":"developer-documentation/scripts/scripts-general","slug":"/developer-documentation/scripts/scripts-general/regex-info","permalink":"/spec-up-t-website/docs/developer-documentation/scripts/scripts-general/regex-info","draft":false,"unlisted":false,"editUrl":"https://github.com/blockchainbird/spec-up-t-website/tree/main/docs/developer-documentation/scripts/scripts-general/regex-info.md","tags":[],"version":"current","lastUpdatedBy":"Kor Dwarshuis","lastUpdatedAt":1758541214000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"External References","permalink":"/spec-up-t-website/docs/developer-documentation/scripts/scripts-general/external-references"},"next":{"title":"Workflow abstraction","permalink":"/spec-up-t-website/docs/developer-documentation/scripts/scripts-general/workflow-abstraction"}}');var i=s(74848),t=s(28453);const c={},l="Regex Inventory",o={},a=[{value:"1. Space and Character Replacement Patterns",id:"1-space-and-character-replacement-patterns",level:2},{value:"<code>/\\s+/g</code> - Space Regex",id:"sg---space-regex",level:3},{value:"<code>/^\\s*~\\s*/</code> - Tilde Line Prefix",id:"ss---tilde-line-prefix",level:3},{value:"2. Template and Tag Processing Patterns",id:"2-template-and-tag-processing-patterns",level:2},{value:"<code>/\\[\\[\\s*([^\\s\\[\\]:]+):?\\s*([^\\]\\n]+)?\\]\\]/img</code> - Template Replacer Regex",id:"sssnimg---template-replacer-regex",level:3},{value:"<code>/\\s*,+\\s*/</code> - Template Arguments Separator",id:"ss---template-arguments-separator",level:3},{value:"<code>/\\s*([^\\s\\[\\]:]+):?\\s*([^\\]\\n]+)?/i</code> - Content Regex for Template Parsing",id:"sssni---content-regex-for-template-parsing",level:3},{value:"3. External Reference Processing Patterns",id:"3-external-reference-processing-patterns",level:2},{value:"<code>/\\[\\[(?:xref|tref):.*?\\]\\]/g</code> - External Reference Detector",id:"xreftrefg---external-reference-detector",level:3},{value:"<code>/\\[\\[tref:([^,]+)/</code> - Tref Spec Name Extractor",id:"tref---tref-spec-name-extractor",level:3},{value:"<code>/\\[\\[tref:([^\\]]+)\\]\\]/</code> - Complete Tref Content Extractor",id:"tref---complete-tref-content-extractor",level:3},{value:"4. Content Cleaning and Processing Patterns",id:"4-content-cleaning-and-processing-patterns",level:2},{value:"<code>/\\[\\[def:[^\\]]*?\\]\\]/g</code> - Definition Tag Remover",id:"defg---definition-tag-remover",level:3},{value:"<code>/\\[\\[ref:/g</code> and <code>/\\]\\]/g</code> - Reference Tag Cleaners",id:"refg-and-g---reference-tag-cleaners",level:3},{value:"5. Specification and File Processing Patterns",id:"5-specification-and-file-processing-patterns",level:2},{value:"<code>/^spec$|^spec-*\\w+$/i</code> - Spec Name Regex",id:"specspec-wi---spec-name-regex",level:3},{value:"<code>/^def$|^ref$|^xref|^tref$/i</code> - Terminology Regex",id:"defrefxreftrefi---terminology-regex",level:3},{value:"6. Search and Highlighting Patterns",id:"6-search-and-highlighting-patterns",level:2},{value:"<code>new RegExp(searchString, &#39;gi&#39;)</code> - Dynamic Search Regex",id:"new-regexpsearchstring-gi---dynamic-search-regex",level:3},{value:"7. URL and Path Processing Patterns",id:"7-url-and-path-processing-patterns",level:2},{value:"<code>/(?:http[s]*:\\/\\/([^\\/]*)|(?:\\/([^\\/?]*)))/g</code> - Path Segment Regex",id:"httpsg---path-segment-regex",level:3},{value:"8. Notice and Container Processing Patterns",id:"8-notice-and-container-processing-patterns",level:2},{value:"<code>/(\\w+)\\s?(.*)?/</code> - Notice Parameters Matcher",id:"ws---notice-parameters-matcher",level:3},{value:"Summary",id:"summary",level:2},{value:"File Purpose and Retention",id:"file-purpose-and-retention",level:2},{value:"How to Use This File",id:"how-to-use-this-file",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"regex-inventory",children:"Regex Inventory"})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"This inventory was generated by Copilot's \u201cClaude Sonnet 4 (Preview)\u201d and has not yet been verified by a human."})}),"\n",(0,i.jsx)(n.h2,{id:"1-space-and-character-replacement-patterns",children:"1. Space and Character Replacement Patterns"}),"\n",(0,i.jsxs)(n.h3,{id:"sg---space-regex",children:[(0,i.jsx)(n.code,{children:"/\\s+/g"})," - Space Regex"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File"}),": ",(0,i.jsx)(n.code,{children:"index.js"})," - Line 48"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),": Used for replacing spaces in term names and spec names when creating IDs and references"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context"}),": Applied to normalize identifiers like ",(0,i.jsx)(n.code,{children:"primary.replace(spaceRegex, '-').toLowerCase()"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Original Spec-Up"}),": Also part of the original ",(0,i.jsx)(n.strong,{children:"Spec-Up"})]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"ss---tilde-line-prefix",children:[(0,i.jsx)(n.code,{children:"/^\\s*~\\s*/"})," - Tilde Line Prefix"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File"}),": ",(0,i.jsx)(n.code,{children:"assets/js/insert-trefs.js"})," - Line 102"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),": Removes leading tilde (",(0,i.jsx)(n.code,{children:"~"}),") and spaces from content lines in term definitions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context"}),": Part of content cleaning when processing external term references"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Original Spec-Up"}),": Not part of the original ",(0,i.jsx)(n.strong,{children:"Spec-Up"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"2-template-and-tag-processing-patterns",children:"2. Template and Tag Processing Patterns"}),"\n",(0,i.jsxs)(n.h3,{id:"sssnimg---template-replacer-regex",children:[(0,i.jsx)(n.code,{children:"/\\[\\[\\s*([^\\s\\[\\]:]+):?\\s*([^\\]\\n]+)?\\]\\]/img"})," - Template Replacer Regex"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File"}),": ",(0,i.jsx)(n.code,{children:"index.js"})," - Line 174"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),": Main regex for matching template tags like ",(0,i.jsx)(n.code,{children:"[[def: term]]"}),", ",(0,i.jsx)(n.code,{children:"[[xref: spec, term]]"}),", ",(0,i.jsx)(n.code,{children:"[[tref: spec, term]]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context"}),": Core pattern matching for all spec-up template substitutions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Original Spec-Up"}),": Also part of the original ",(0,i.jsx)(n.strong,{children:"Spec-Up"})]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"ss---template-arguments-separator",children:[(0,i.jsx)(n.code,{children:"/\\s*,+\\s*/"})," - Template Arguments Separator"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File"}),": ",(0,i.jsx)(n.code,{children:"index.js"})," - Line 175"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),": Splits arguments within template tags (e.g., separating spec from term in ",(0,i.jsx)(n.code,{children:"[[xref: spec, term]]"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context"}),": Used with ",(0,i.jsx)(n.code,{children:"replacerArgsRegex"})," to parse template arguments"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Original Spec-Up"}),": Also part of the original ",(0,i.jsx)(n.strong,{children:"Spec-Up"})]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"sssni---content-regex-for-template-parsing",children:[(0,i.jsx)(n.code,{children:"/\\s*([^\\s\\[\\]:]+):?\\s*([^\\]\\n]+)?/i"})," - Content Regex for Template Parsing"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File"}),": ",(0,i.jsx)(n.code,{children:"src/markdown-it-extensions.js"})," - Line 10"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),": Extracts template type and arguments from content between delimiters"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context"}),": Parses the internal structure of template markers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Original Spec-Up"}),": Also part of the original ",(0,i.jsx)(n.strong,{children:"Spec-Up"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"3-external-reference-processing-patterns",children:"3. External Reference Processing Patterns"}),"\n",(0,i.jsxs)(n.h3,{id:"xreftrefg---external-reference-detector",children:[(0,i.jsx)(n.code,{children:"/\\[\\[(?:xref|tref):.*?\\]\\]/g"})," - External Reference Detector"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File"}),": ",(0,i.jsx)(n.code,{children:"src/collect-external-references.js"})," - Line 82"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),": Finds all xref and tref tags in markdown content for external reference collection"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context"}),": Used to identify cross-references that need external repository data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Original Spec-Up"}),": Not part of the original ",(0,i.jsx)(n.strong,{children:"Spec-Up"})]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"tref---tref-spec-name-extractor",children:[(0,i.jsx)(n.code,{children:"/\\[\\[tref:([^,]+)/"})," - Tref Spec Name Extractor"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File"}),": ",(0,i.jsx)(n.code,{children:"src/health-check/term-references-checker.js"})," - Line 16"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),": Extracts spec name from tref tags in markdown files"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context"}),": Health check validation of tref references"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Original Spec-Up"}),": Not part of the original ",(0,i.jsx)(n.strong,{children:"Spec-Up"})]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"tref---complete-tref-content-extractor",children:[(0,i.jsx)(n.code,{children:"/\\[\\[tref:([^\\]]+)\\]\\]/"})," - Complete Tref Content Extractor"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File"}),": ",(0,i.jsx)(n.code,{children:"src/health-check/tref-term-checker.js"})," - Line 19"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),": Extracts complete tref content including spec and term"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context"}),": Term validation in health check system"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Original Spec-Up"}),": Not part of the original ",(0,i.jsx)(n.strong,{children:"Spec-Up"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"4-content-cleaning-and-processing-patterns",children:"4. Content Cleaning and Processing Patterns"}),"\n",(0,i.jsxs)(n.h3,{id:"defg---definition-tag-remover",children:[(0,i.jsx)(n.code,{children:"/\\[\\[def:[^\\]]*?\\]\\]/g"})," - Definition Tag Remover"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File"}),": ",(0,i.jsx)(n.code,{children:"assets/js/insert-trefs.js"})," - Line 100"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),": Removes definition tags from external content before rendering"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context"}),": Cleaning up transcluded content from external repositories"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Original Spec-Up"}),": Not part of the original ",(0,i.jsx)(n.strong,{children:"Spec-Up"})]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"refg-and-g---reference-tag-cleaners",children:[(0,i.jsx)(n.code,{children:"/\\[\\[ref:/g"})," and ",(0,i.jsx)(n.code,{children:"/\\]\\]/g"})," - Reference Tag Cleaners"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File"}),": ",(0,i.jsx)(n.code,{children:"assets/js/insert-trefs.js"})," - Line 104-105"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),": Removes reference markup from external content"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context"}),": Part of content sanitization for external terms"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Original Spec-Up"}),": Not part of the original ",(0,i.jsx)(n.strong,{children:"Spec-Up"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"5-specification-and-file-processing-patterns",children:"5. Specification and File Processing Patterns"}),"\n",(0,i.jsxs)(n.h3,{id:"specspec-wi---spec-name-regex",children:[(0,i.jsx)(n.code,{children:"/^spec$|^spec-*\\w+$/i"})," - Spec Name Regex"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File"}),": ",(0,i.jsx)(n.code,{children:"index.js"})," - Line 49"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),": Matches specification names in various formats"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context"}),": Validates and processes spec references in documentation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Original Spec-Up"}),": Not part of the original ",(0,i.jsx)(n.strong,{children:"Spec-Up"})]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"defrefxreftrefi---terminology-regex",children:[(0,i.jsx)(n.code,{children:"/^def$|^ref$|^xref|^tref$/i"})," - Terminology Regex"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File"}),": ",(0,i.jsx)(n.code,{children:"index.js"})," - Line 60"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),": Matches terminology-related template types"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context"}),": Filters template types for terminology processing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Original Spec-Up"}),": Not part of the original ",(0,i.jsx)(n.strong,{children:"Spec-Up"}),", but this was the earlier version: ",(0,i.jsx)(n.code,{children:"/^def$|^ref$|^xref/i"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"6-search-and-highlighting-patterns",children:"6. Search and Highlighting Patterns"}),"\n",(0,i.jsxs)(n.h3,{id:"new-regexpsearchstring-gi---dynamic-search-regex",children:[(0,i.jsx)(n.code,{children:"new RegExp(searchString, 'gi')"})," - Dynamic Search Regex"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File"}),": ",(0,i.jsx)(n.code,{children:"assets/js/search.js"})," - Line 285"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),": Creates case-insensitive search pattern for in-page text highlighting"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context"}),": Real-time search functionality in rendered specifications"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Original Spec-Up"}),": Not part of the original ",(0,i.jsx)(n.strong,{children:"Spec-Up"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"7-url-and-path-processing-patterns",children:"7. URL and Path Processing Patterns"}),"\n",(0,i.jsxs)(n.h3,{id:"httpsg---path-segment-regex",children:[(0,i.jsx)(n.code,{children:"/(?:http[s]*:\\/\\/([^\\/]*)|(?:\\/([^\\/?]*)))/g"})," - Path Segment Regex"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File"}),": ",(0,i.jsx)(n.code,{children:"src/markdown-it-extensions.js"})," - Line 129"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),": Extracts domains and path segments from URLs for link styling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context"}),": Adds path-related attributes to links for enhanced styling and behavior"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Original Spec-Up"}),": Also part of the original ",(0,i.jsx)(n.strong,{children:"Spec-Up"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"8-notice-and-container-processing-patterns",children:"8. Notice and Container Processing Patterns"}),"\n",(0,i.jsxs)(n.h3,{id:"ws---notice-parameters-matcher",children:[(0,i.jsx)(n.code,{children:"/(\\w+)\\s?(.*)?/"})," - Notice Parameters Matcher"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File"}),": ",(0,i.jsx)(n.code,{children:"index.js"})," - Line 133"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),": Validates and extracts parameters from notice containers (note, warning, example, etc.)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Context"}),": Processing custom notice blocks in markdown content"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Original Spec-Up"}),": Also part of the original ",(0,i.jsx)(n.strong,{children:"Spec-Up"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsxs)(n.p,{children:["The codebase uses approximately ",(0,i.jsx)(n.strong,{children:"15+ distinct regex patterns"})," across various files, primarily for:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Template tag processing and substitution"}),"\n",(0,i.jsx)(n.li,{children:"External reference management"}),"\n",(0,i.jsx)(n.li,{children:"Content cleaning and sanitization"}),"\n",(0,i.jsx)(n.li,{children:"File and specification validation"}),"\n",(0,i.jsx)(n.li,{children:"Search functionality"}),"\n",(0,i.jsx)(n.li,{children:"URL processing and link enhancement"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Most patterns follow a consistent approach of using capturing groups to extract specific parts of matched content, with case-insensitive flags commonly applied for flexibility."}),"\n",(0,i.jsx)(n.h2,{id:"file-purpose-and-retention",children:"File Purpose and Retention"}),"\n",(0,i.jsxs)(n.p,{children:["This file (",(0,i.jsx)(n.code,{children:"REGEX-INFO.md"}),") should be retained because:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Documentation Value"}),": It provides a comprehensive overview of all regex patterns used in the codebase, which is essential for maintenance and debugging"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Developer Reference"}),": New developers can quickly understand the regex patterns without having to search through the entire codebase"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Code Quality"}),": Helps identify potential regex complexity issues and opportunities for refactoring"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SonarQube Compliance"}),": Serves as documentation that can help with code analysis and review processes"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"how-to-use-this-file",children:"How to Use This File"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"For Debugging"}),": When encountering regex-related issues, reference this file to understand the pattern's purpose"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"For Development"}),": Before adding new regex patterns, check if existing patterns can be reused"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"For Code Review"}),": Use this as a reference when reviewing changes to regex patterns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"For Refactoring"}),": Identify patterns that might be duplicated or overly complex"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);
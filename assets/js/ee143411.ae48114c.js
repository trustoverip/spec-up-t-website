"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4765],{28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var t=s(96540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}},70026:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"developer-documentation/testing-guide","title":"Testing Guide for Spec-Up-T","description":"Welcome to the comprehensive testing guide for Spec-Up-T! This document will help you understand how to test the Spec-Up-T system, set up testing environments, write effective tests, and contribute to the project\'s quality assurance.","source":"@site/docs/developer-documentation/testing-guide.md","sourceDirName":"developer-documentation","slug":"/developer-documentation/testing-guide","permalink":"/spec-up-t-website/docs/developer-documentation/testing-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/blockchainbird/spec-up-t-website/tree/main/docs/developer-documentation/testing-guide.md","tags":[],"version":"current","lastUpdatedBy":"Kor Dwarshuis","lastUpdatedAt":1758014594000,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Spec-Up-T Editor","permalink":"/spec-up-t-website/docs/developer-documentation/spec-up-t-editor-documentation"},"next":{"title":"Spec-Up-T Editor","permalink":"/spec-up-t-website/docs/category/spec-up-t-editor"}}');var i=s(74848),r=s(28453);const l={},o="Testing Guide for Spec-Up-T",c={},a=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"Testing Philosophy",id:"testing-philosophy",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Quick Setup",id:"quick-setup",level:3},{value:"Setting Up Your Testing Environment",id:"setting-up-your-testing-environment",level:2},{value:"Local Development Environment",id:"local-development-environment",level:3},{value:"Testing Configuration",id:"testing-configuration",level:3},{value:"Understanding the Codebase",id:"understanding-the-codebase",level:2},{value:"Core Architecture",id:"core-architecture",level:3},{value:"Key Testing Areas",id:"key-testing-areas",level:3},{value:"Types of Testing",id:"types-of-testing",level:2},{value:"1. Unit Testing",id:"1-unit-testing",level:3},{value:"2. Integration Testing",id:"2-integration-testing",level:3},{value:"3. End-to-End Testing",id:"3-end-to-end-testing",level:3},{value:"4. Performance Testing",id:"4-performance-testing",level:3},{value:"Writing Tests",id:"writing-tests",level:2},{value:"Unit Test Example",id:"unit-test-example",level:3},{value:"Integration Test Example",id:"integration-test-example",level:3},{value:"End-to-End Test Example",id:"end-to-end-test-example",level:3},{value:"Running Tests",id:"running-tests",level:2},{value:"Basic Test Commands",id:"basic-test-commands",level:3},{value:"Coverage Reports",id:"coverage-reports",level:3},{value:"Debugging Tests",id:"debugging-tests",level:3},{value:"Testing Workflows",id:"testing-workflows",level:2},{value:"1. Testing New Features",id:"1-testing-new-features",level:3},{value:"2. Bug Fix Testing",id:"2-bug-fix-testing",level:3},{value:"3. Performance Testing",id:"3-performance-testing",level:3},{value:"Continuous Integration",id:"continuous-integration",level:2},{value:"GitHub Actions Testing",id:"github-actions-testing",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Test Organization",id:"test-organization",level:3},{value:"Test Data Management",id:"test-data-management",level:3},{value:"Mocking and Stubbing",id:"mocking-and-stubbing",level:3},{value:"Assertion Patterns",id:"assertion-patterns",level:3},{value:"Common Testing Scenarios",id:"common-testing-scenarios",level:2},{value:"1. Template Processing Tests",id:"1-template-processing-tests",level:3},{value:"2. File Processing Tests",id:"2-file-processing-tests",level:3},{value:"3. Health Check Tests",id:"3-health-check-tests",level:3},{value:"4. GitHub Integration Tests",id:"4-github-integration-tests",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Testing Issues",id:"common-testing-issues",level:3},{value:"Debugging Test Failures",id:"debugging-test-failures",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:3},{value:"Testing Tools and Libraries",id:"testing-tools-and-libraries",level:2},{value:"Recommended Testing Stack",id:"recommended-testing-stack",level:3},{value:"Installation",id:"installation",level:3},{value:"Contributing to Testing",id:"contributing-to-testing",level:2},{value:"Pull Request Testing Checklist",id:"pull-request-testing-checklist",level:3},{value:"Reporting Test Issues",id:"reporting-test-issues",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"testing-guide-for-spec-up-t",children:"Testing Guide for Spec-Up-T"})}),"\n",(0,i.jsx)(n.p,{children:"Welcome to the comprehensive testing guide for Spec-Up-T! This document will help you understand how to test the Spec-Up-T system, set up testing environments, write effective tests, and contribute to the project's quality assurance."}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#overview",children:"Overview"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#testing-philosophy",children:"Testing Philosophy"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#getting-started",children:"Getting Started"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#setting-up-your-testing-environment",children:"Setting Up Your Testing Environment"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#understanding-the-codebase",children:"Understanding the Codebase"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#types-of-testing",children:"Types of Testing"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#writing-tests",children:"Writing Tests"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#running-tests",children:"Running Tests"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#testing-workflows",children:"Testing Workflows"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#continuous-integration",children:"Continuous Integration"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#common-testing-scenarios",children:"Common Testing Scenarios"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#troubleshooting",children:"Troubleshooting"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Spec-Up-T is a technical specification drafting tool that generates rich specification documents from markdown. As a tester, you'll be working with:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Node.js backend scripts"})," that process markdown and generate HTML"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Browser-based JavaScript"})," that provides interactive features"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GitHub integration"})," for repository management and workflow automation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Template processing"})," for custom markdown extensions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"External specification references"})," and cross-referencing systems"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testing-philosophy",children:"Testing Philosophy"}),"\n",(0,i.jsx)(n.p,{children:"Spec-Up-T follows a comprehensive testing approach:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unit Testing"}),": Individual functions and modules"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Integration Testing"}),": Component interactions and data flow"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"End-to-End Testing"}),": Complete user workflows"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Manual Testing"}),": User experience and edge cases"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance Testing"}),": Build times and rendering speed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Security Testing"}),": GitHub token handling and input validation"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,i.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(n.p,{children:"Before you begin testing Spec-Up-T, ensure you have:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Node.js"})," version 16 or higher"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"npm"})," (comes with Node.js)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Git"})," for version control"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GitHub account"})," with Personal Access Token"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Code editor"})," (VS Code recommended)"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Basic understanding of JavaScript and markdown"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"quick-setup",children:"Quick Setup"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Clone the repository"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/trustoverip/spec-up-t.git\ncd spec-up-t\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Install dependencies"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Install Jest testing framework"})," (if not already installed):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev jest\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Verify the setup"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm test\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"setting-up-your-testing-environment",children:"Setting Up Your Testing Environment"}),"\n",(0,i.jsx)(n.h3,{id:"local-development-environment",children:"Local Development Environment"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Create a test project"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx create-spec-up-t test-project\ncd test-project\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Set up environment variables"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cp .env.example .env\n# Edit .env with your GitHub token and settings\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Install development dependencies"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev jest puppeteer @testing-library/jest-dom\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"testing-configuration",children:"Testing Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["Create or verify your ",(0,i.jsx)(n.code,{children:"jest.config.js"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"module.exports = {\n  collectCoverageFrom: [\n    'src/**/*.{js,jsx}',\n    '!src/**/*.test.{js,jsx}',\n    '!src/**/__tests__/**',\n    '!src/**/__mocks__/**',\n  ],\n  coverageDirectory: 'coverage',\n  coverageReporters: ['text', 'lcov', 'html'],\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80,\n    },\n  },\n  testEnvironment: 'node',\n  verbose: true,\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"understanding-the-codebase",children:"Understanding the Codebase"}),"\n",(0,i.jsx)(n.h3,{id:"core-architecture",children:"Core Architecture"}),"\n",(0,i.jsx)(n.p,{children:"Spec-Up-T consists of several key components you'll need to test:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Core Processing Engine"})," (",(0,i.jsx)(n.code,{children:"src/"})," directory):"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"index.js"})," - Main entry point and workflow orchestration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"markdown-it-extensions.js"})," - Custom markdown processing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"references.js"})," - External specification handling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"collect-external-references.js"})," - Cross-reference management"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Utility Modules"})," (",(0,i.jsx)(n.code,{children:"src/utils/"})," directory):"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"logger.js"})," - Centralized logging system"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"file-filter.js"})," - File processing utilities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"template-patterns.js"})," - Template parsing utilities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"git-info.js"})," - Git repository information"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Build Scripts"})," (",(0,i.jsx)(n.code,{children:"src/"})," directory):"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"create-term-index.js"})," - Term indexing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"create-pdf.js"})," - PDF generation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"health-check.js"})," - System validation"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Frontend Assets"})," (",(0,i.jsx)(n.code,{children:"assets/"})," directory):"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"js/"})," - Browser-side JavaScript"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"css/"})," - Styling and layout"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"key-testing-areas",children:"Key Testing Areas"}),"\n",(0,i.jsx)(n.p,{children:"Focus your testing efforts on these critical areas:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Template Processing"}),": Custom ",(0,i.jsx)(n.code,{children:"[[tag]]"})," syntax handling"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"External References"}),": Cross-specification linking"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"File Processing"}),": Markdown parsing and HTML generation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Health Checks"}),": System validation and error reporting"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GitHub Integration"}),": Repository access and workflow automation"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"types-of-testing",children:"Types of Testing"}),"\n",(0,i.jsx)(n.h3,{id:"1-unit-testing",children:"1. Unit Testing"}),"\n",(0,i.jsx)(n.p,{children:"Test individual functions and modules in isolation."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example test file structure"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"tests/\n\u251c\u2500\u2500 unit/\n\u2502   \u251c\u2500\u2500 template-processing.test.js\n\u2502   \u251c\u2500\u2500 file-filter.test.js\n\u2502   \u2514\u2500\u2500 logger.test.js\n\u251c\u2500\u2500 integration/\n\u2502   \u251c\u2500\u2500 markdown-processing.test.js\n\u2502   \u2514\u2500\u2500 external-references.test.js\n\u2514\u2500\u2500 e2e/\n    \u251c\u2500\u2500 complete-workflow.test.js\n    \u2514\u2500\u2500 github-integration.test.js\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-integration-testing",children:"2. Integration Testing"}),"\n",(0,i.jsx)(n.p,{children:"Test how components work together."}),"\n",(0,i.jsx)(n.h3,{id:"3-end-to-end-testing",children:"3. End-to-End Testing"}),"\n",(0,i.jsx)(n.p,{children:"Test complete user workflows from start to finish."}),"\n",(0,i.jsx)(n.h3,{id:"4-performance-testing",children:"4. Performance Testing"}),"\n",(0,i.jsx)(n.p,{children:"Monitor build times, memory usage, and rendering performance."}),"\n",(0,i.jsx)(n.h2,{id:"writing-tests",children:"Writing Tests"}),"\n",(0,i.jsx)(n.h3,{id:"unit-test-example",children:"Unit Test Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// tests/unit/template-processing.test.js\nconst { parseTemplate } = require('../../src/utils/template-patterns');\n\ndescribe('Template Processing', () => {\n  test('should parse basic definition template', () => {\n    const input = '[[def: example]]';\n    const result = parseTemplate(input);\n    \n    expect(result).toEqual({\n      type: 'def',\n      term: 'example',\n      content: null\n    });\n  });\n\n  test('should handle templates with content', () => {\n    const input = '[[ref: specification, example content]]';\n    const result = parseTemplate(input);\n    \n    expect(result).toEqual({\n      type: 'ref',\n      term: 'specification',\n      content: 'example content'\n    });\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"integration-test-example",children:"Integration Test Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// tests/integration/markdown-processing.test.js\nconst md = require('markdown-it')();\nconst markdownExtensions = require('../../src/markdown-it-extensions');\n\ndescribe('Markdown Processing Integration', () => {\n  let mdProcessor;\n\n  beforeEach(() => {\n    mdProcessor = md.use(markdownExtensions, [{\n      filter: type => type.match(/^def$|^ref$|^xref|^tref$/i),\n      parse(token, type, primary) {\n        return primary;\n      }\n    }]);\n  });\n\n  test('should process definition with term reference', () => {\n    const markdown = `\n[[def: agent]]\n\n~ An agent is an entity that can act.\n\nSee also: [[tref: controller]]\n    `;\n\n    const result = mdProcessor.render(markdown);\n    \n    expect(result).toContain('data-term=\"agent\"');\n    expect(result).toContain('<a href=\"#controller\"');\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"end-to-end-test-example",children:"End-to-End Test Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// tests/e2e/complete-workflow.test.js\nconst fs = require('fs-extra');\nconst path = require('path');\nconst { execSync } = require('child_process');\n\ndescribe('Complete Workflow', () => {\n  const testDir = path.join(__dirname, 'temp-test-project');\n\n  beforeEach(async () => {\n    // Create temporary test project\n    await fs.ensureDir(testDir);\n    process.chdir(testDir);\n  });\n\n  afterEach(async () => {\n    // Clean up test directory\n    await fs.remove(testDir);\n  });\n\n  test('should generate complete specification from markdown', async () => {\n    // Setup test files\n    const specsConfig = {\n      specs: [{\n        spec_directory: \"spec\",\n        output_path: \"./\",\n        markdown_paths: [\"spec-body.md\"],\n        title: \"Test Specification\"\n      }]\n    };\n\n    await fs.writeJson('specs.json', specsConfig);\n    await fs.ensureDir('spec');\n    await fs.writeFile('spec/spec-body.md', `\n# Test Specification\n\n[[def: example]]\n\n~ An example definition for testing.\n\nThis specification includes a [[tref: example]].\n    `);\n\n    // Run the build process\n    execSync('npx spec-up-t', { stdio: 'inherit' });\n\n    // Verify output\n    const outputExists = await fs.pathExists('index.html');\n    expect(outputExists).toBe(true);\n\n    const html = await fs.readFile('index.html', 'utf8');\n    expect(html).toContain('Test Specification');\n    expect(html).toContain('data-term=\"example\"');\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"running-tests",children:"Running Tests"}),"\n",(0,i.jsx)(n.h3,{id:"basic-test-commands",children:"Basic Test Commands"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Run all tests\nnpm test\n\n# Run tests with coverage\nnpm run test:coverage\n\n# Run tests in watch mode\nnpm run test:watch\n\n# Run specific test file\nnpm test -- template-processing.test.js\n\n# Run tests matching a pattern\nnpm test -- --testNamePattern="definition"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"coverage-reports",children:"Coverage Reports"}),"\n",(0,i.jsx)(n.p,{children:"Generate and view coverage reports:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm run test:coverage\nopen coverage/lcov-report/index.html\n"})}),"\n",(0,i.jsx)(n.h3,{id:"debugging-tests",children:"Debugging Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run tests with debugging\nnode --inspect-brk node_modules/.bin/jest --runInBand\n\n# Run specific test with debugging\nnode --inspect-brk node_modules/.bin/jest --runInBand template-processing.test.js\n"})}),"\n",(0,i.jsx)(n.h2,{id:"testing-workflows",children:"Testing Workflows"}),"\n",(0,i.jsx)(n.h3,{id:"1-testing-new-features",children:"1. Testing New Features"}),"\n",(0,i.jsx)(n.p,{children:"When testing a new feature:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Understand the requirements"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Write failing tests first"})," (TDD approach)"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Implement the feature"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Make tests pass"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Refactor and optimize"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Add integration tests"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Test edge cases"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-bug-fix-testing",children:"2. Bug Fix Testing"}),"\n",(0,i.jsx)(n.p,{children:"When testing bug fixes:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reproduce the bug"})," with a test"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Verify the test fails"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Apply the fix"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Verify the test passes"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Add regression tests"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-performance-testing",children:"3. Performance Testing"}),"\n",(0,i.jsx)(n.p,{children:"Monitor and test performance:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Performance test example\ntest('should process large markdown file within time limit', async () => {\n  const startTime = Date.now();\n  \n  // Process large file\n  await processLargeMarkdownFile();\n  \n  const endTime = Date.now();\n  const processingTime = endTime - startTime;\n  \n  expect(processingTime).toBeLessThan(5000); // 5 seconds max\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"continuous-integration",children:"Continuous Integration"}),"\n",(0,i.jsx)(n.h3,{id:"github-actions-testing",children:"GitHub Actions Testing"}),"\n",(0,i.jsxs)(n.p,{children:["Create ",(0,i.jsx)(n.code,{children:".github/workflows/test.yml"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"name: Test Suite\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    \n    strategy:\n      matrix:\n        node-version: [16, 18, 20]\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n    \n    - name: Install dependencies\n      run: npm ci\n    \n    - name: Run tests\n      run: npm test\n    \n    - name: Upload coverage reports\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage/lcov.info\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"test-organization",children:"Test Organization"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Group related tests"})," using ",(0,i.jsx)(n.code,{children:"describe"})," blocks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use descriptive test names"})," that explain what is being tested"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Follow the Arrange-Act-Assert pattern"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Keep tests independent"})," and isolated"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use setup and teardown"})," for common test data"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"test-data-management",children:"Test Data Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Good: Use test fixtures\nconst testFixtures = {\n  basicDefinition: '[[def: example]]',\n  complexReference: '[[xref: external-spec, term-name]]',\n  markdownDocument: `\n# Test Document\n\n[[def: agent]]\n\n~ An agent is an entity.\n  `\n};\n\n// Good: Create test data factories\nfunction createTestSpec(overrides = {}) {\n  return {\n    title: 'Test Specification',\n    spec_directory: 'spec',\n    output_path: './',\n    markdown_paths: ['spec-body.md'],\n    ...overrides\n  };\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"mocking-and-stubbing",children:"Mocking and Stubbing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Mock external dependencies\njest.mock('axios');\njest.mock('fs-extra');\n\n// Mock GitHub API calls\nconst mockGitHubApi = {\n  getContent: jest.fn(),\n  updateFile: jest.fn(),\n  createFile: jest.fn()\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"assertion-patterns",children:"Assertion Patterns"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Good assertions\nexpect(result).toBeDefined();\nexpect(result.type).toBe('definition');\nexpect(result.errors).toHaveLength(0);\nexpect(html).toContain('data-term=\"example\"');\nexpect(html).toMatch(/<dt[^>]*data-term=\"example\"[^>]*>/);\n\n// Test error conditions\nexpect(() => parseInvalidTemplate()).toThrow('Invalid template syntax');\n"})}),"\n",(0,i.jsx)(n.h2,{id:"common-testing-scenarios",children:"Common Testing Scenarios"}),"\n",(0,i.jsx)(n.h3,{id:"1-template-processing-tests",children:"1. Template Processing Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"describe('Template Processing', () => {\n  test('definition templates', () => {\n    // Test [[def: term]] processing\n  });\n\n  test('reference templates', () => {\n    // Test [[ref: term]] processing\n  });\n\n  test('external references', () => {\n    // Test [[xref: spec, term]] processing\n  });\n\n  test('escaped templates', () => {\n    // Test \\[[def: term]] handling\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-file-processing-tests",children:"2. File Processing Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"describe('File Processing', () => {\n  test('markdown file parsing', () => {\n    // Test markdown to HTML conversion\n  });\n\n  test('image handling', () => {\n    // Test image path resolution\n  });\n\n  test('file filtering', () => {\n    // Test which files are processed\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-health-check-tests",children:"3. Health Check Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"describe('Health Checks', () => {\n  test('configuration validation', () => {\n    // Test specs.json validation\n  });\n\n  test('external reference validation', () => {\n    // Test external spec accessibility\n  });\n\n  test('term reference validation', () => {\n    // Test term reference consistency\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-github-integration-tests",children:"4. GitHub Integration Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"describe('GitHub Integration', () => {\n  test('repository access', () => {\n    // Test repository content fetching\n  });\n\n  test('file updates', () => {\n    // Test file modification via API\n  });\n\n  test('workflow automation', () => {\n    // Test GitHub Actions integration\n  });\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"common-testing-issues",children:"Common Testing Issues"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Tests failing in CI but passing locally"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Check Node.js version differences"}),"\n",(0,i.jsx)(n.li,{children:"Verify environment variables"}),"\n",(0,i.jsx)(n.li,{children:"Check file path separators (Windows vs Unix)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Slow test execution"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"--detectSlowTests"})," flag"]}),"\n",(0,i.jsx)(n.li,{children:"Mock heavy operations"}),"\n",(0,i.jsxs)(n.li,{children:["Run tests in parallel with ",(0,i.jsx)(n.code,{children:"--maxWorkers"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Flaky tests"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Identify race conditions"}),"\n",(0,i.jsx)(n.li,{children:"Add proper async/await handling"}),"\n",(0,i.jsx)(n.li,{children:"Use deterministic test data"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Coverage issues"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Check ignored files in jest config"}),"\n",(0,i.jsx)(n.li,{children:"Verify test file naming patterns"}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"--coverage"})," flag for detailed reports"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"debugging-test-failures",children:"Debugging Test Failures"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Add debugging output\ntest('should process template', () => {\n  const input = '[[def: example]]';\n  const result = parseTemplate(input);\n  \n  console.log('Input:', input);\n  console.log('Result:', result);\n  \n  expect(result.type).toBe('def');\n});\n\n// Use Jest's built-in debugging\ntest('should process template', () => {\n  const result = parseTemplate('[[def: example]]');\n  \n  // This will show detailed object comparison\n  expect(result).toEqual(\n    expect.objectContaining({\n      type: 'def',\n      term: 'example'\n    })\n  );\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Monitor test performance\nbeforeEach(() => {\n  global.testStartTime = Date.now();\n});\n\nafterEach(() => {\n  const duration = Date.now() - global.testStartTime;\n  if (duration > 1000) {\n    console.warn(`Slow test detected: ${duration}ms`);\n  }\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"testing-tools-and-libraries",children:"Testing Tools and Libraries"}),"\n",(0,i.jsx)(n.h3,{id:"recommended-testing-stack",children:"Recommended Testing Stack"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Jest"}),": Test runner and assertion library"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Puppeteer"}),": Browser automation for E2E tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"@testing-library/jest-dom"}),": Enhanced DOM assertions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"supertest"}),": HTTP assertion library"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"nock"}),": HTTP request mocking"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"tmp"}),": Temporary directory management"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev \\\n  jest \\\n  puppeteer \\\n  @testing-library/jest-dom \\\n  supertest \\\n  nock \\\n  tmp\n"})}),"\n",(0,i.jsx)(n.h2,{id:"contributing-to-testing",children:"Contributing to Testing"}),"\n",(0,i.jsx)(n.h3,{id:"pull-request-testing-checklist",children:"Pull Request Testing Checklist"}),"\n",(0,i.jsx)(n.p,{children:"Before submitting a pull request:"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","All existing tests pass"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","New tests added for new functionality"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Code coverage meets requirements"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Integration tests updated if needed"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Documentation updated"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Manual testing performed"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"reporting-test-issues",children:"Reporting Test Issues"}),"\n",(0,i.jsx)(n.p,{children:"When reporting testing-related issues:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Provide test environment details"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Include reproducible test case"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Share error messages and stack traces"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Suggest potential solutions"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"This testing guide should give you a comprehensive foundation for testing Spec-Up-T. Remember that good testing is an iterative process\u2014start with basic tests and gradually build more comprehensive coverage as you become familiar with the codebase."}),"\n",(0,i.jsx)(n.p,{children:"For more specific information about particular components or workflows, refer to the other documentation sections in this guide."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);